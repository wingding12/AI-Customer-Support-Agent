"use strict";
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.HttpClient = exports.ContentType = void 0;
var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["JsonApi"] = "application/vnd.api+json";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
    ContentType["Text"] = "text/plain";
})(ContentType || (exports.ContentType = ContentType = {}));
class HttpClient {
    baseUrl = "https://api.vapi.ai";
    securityData = null;
    securityWorker;
    abortControllers = new Map();
    customFetch = (...fetchParams) => fetch(...fetchParams);
    baseApiParams = {
        credentials: "same-origin",
        headers: {},
        redirect: "follow",
        referrerPolicy: "no-referrer",
    };
    constructor(apiConfig = {}) {
        Object.assign(this, apiConfig);
    }
    setSecurityData = (data) => {
        this.securityData = data;
    };
    encodeQueryParam(key, value) {
        const encodedKey = encodeURIComponent(key);
        return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
    }
    addQueryParam(query, key) {
        return this.encodeQueryParam(key, query[key]);
    }
    addArrayQueryParam(query, key) {
        const value = query[key];
        return value.map((v) => this.encodeQueryParam(key, v)).join("&");
    }
    toQueryString(rawQuery) {
        const query = rawQuery || {};
        const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
        return keys
            .map((key) => Array.isArray(query[key])
            ? this.addArrayQueryParam(query, key)
            : this.addQueryParam(query, key))
            .join("&");
    }
    addQueryParams(rawQuery) {
        const queryString = this.toQueryString(rawQuery);
        return queryString ? `?${queryString}` : "";
    }
    contentFormatters = {
        [ContentType.Json]: (input) => input !== null && (typeof input === "object" || typeof input === "string")
            ? JSON.stringify(input)
            : input,
        [ContentType.JsonApi]: (input) => input !== null && (typeof input === "object" || typeof input === "string")
            ? JSON.stringify(input)
            : input,
        [ContentType.Text]: (input) => input !== null && typeof input !== "string"
            ? JSON.stringify(input)
            : input,
        [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((formData, key) => {
            const property = input[key];
            formData.append(key, property instanceof Blob
                ? property
                : typeof property === "object" && property !== null
                    ? JSON.stringify(property)
                    : `${property}`);
            return formData;
        }, new FormData()),
        [ContentType.UrlEncoded]: (input) => this.toQueryString(input),
    };
    mergeRequestParams(params1, params2) {
        return {
            ...this.baseApiParams,
            ...params1,
            ...(params2 || {}),
            headers: {
                ...(this.baseApiParams.headers || {}),
                ...(params1.headers || {}),
                ...((params2 && params2.headers) || {}),
            },
        };
    }
    createAbortSignal = (cancelToken) => {
        if (this.abortControllers.has(cancelToken)) {
            const abortController = this.abortControllers.get(cancelToken);
            if (abortController) {
                return abortController.signal;
            }
            return void 0;
        }
        const abortController = new AbortController();
        this.abortControllers.set(cancelToken, abortController);
        return abortController.signal;
    };
    abortRequest = (cancelToken) => {
        const abortController = this.abortControllers.get(cancelToken);
        if (abortController) {
            abortController.abort();
            this.abortControllers.delete(cancelToken);
        }
    };
    request = async ({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }) => {
        const secureParams = ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
            this.securityWorker &&
            (await this.securityWorker(this.securityData))) ||
            {};
        const requestParams = this.mergeRequestParams(params, secureParams);
        const queryString = query && this.toQueryString(query);
        const payloadFormatter = this.contentFormatters[type || ContentType.Json];
        const responseFormat = format || requestParams.format;
        return this.customFetch(`${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`, {
            ...requestParams,
            headers: {
                ...(requestParams.headers || {}),
                ...(type && type !== ContentType.FormData
                    ? { "Content-Type": type }
                    : {}),
            },
            signal: (cancelToken
                ? this.createAbortSignal(cancelToken)
                : requestParams.signal) || null,
            body: typeof body === "undefined" || body === null
                ? null
                : payloadFormatter(body),
        }).then(async (response) => {
            const r = response.clone();
            r.data = null;
            r.error = null;
            const data = !responseFormat
                ? r
                : await response[responseFormat]()
                    .then((data) => {
                    if (r.ok) {
                        r.data = data;
                    }
                    else {
                        r.error = data;
                    }
                    return r;
                })
                    .catch((e) => {
                    r.error = e;
                    return r;
                });
            if (cancelToken) {
                this.abortControllers.delete(cancelToken);
            }
            if (!response.ok)
                throw data;
            return data;
        });
    };
}
exports.HttpClient = HttpClient;
/**
 * @title Vapi API
 * @version 1.0
 * @baseUrl https://api.vapi.ai
 * @contact
 *
 * Voice AI for developers.
 */
class Api extends HttpClient {
    call = {
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerCreate
         * @summary Create Call
         * @request POST:/call
         * @secure
         */
        callControllerCreate: (data, params = {}) => this.request({
            path: `/call`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindAll
         * @summary List Calls
         * @request GET:/call
         * @secure
         */
        callControllerFindAll: (query, params = {}) => this.request({
            path: `/call`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindOne
         * @summary Get Call
         * @request GET:/call/{id}
         * @secure
         */
        callControllerFindOne: (id, params = {}) => this.request({
            path: `/call/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerUpdate
         * @summary Update Call
         * @request PATCH:/call/{id}
         * @secure
         */
        callControllerUpdate: (id, data, params = {}) => this.request({
            path: `/call/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerDeleteCallData
         * @summary Delete Call Data
         * @request DELETE:/call/{id}
         * @secure
         */
        callControllerDeleteCallData: (id, params = {}) => this.request({
            path: `/call/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerCreatePhoneCall
         * @summary Create Phone Call
         * @request POST:/call/phone
         * @deprecated
         * @secure
         */
        callControllerCreatePhoneCall: (data, params = {}) => this.request({
            path: `/call/phone`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerCreateWebCall
         * @summary Create Web Call
         * @request POST:/call/web
         * @secure
         */
        callControllerCreateWebCall: (data, params = {}) => this.request({
            path: `/call/web`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
    };
    v2 = {
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerCallsExport
         * @summary Export Calls to CSV
         * @request GET:/v2/call/export
         * @secure
         */
        callControllerCallsExport: (query, params = {}) => this.request({
            path: `/v2/call/export`,
            method: "GET",
            query: query,
            secure: true,
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindAllPaginated
         * @summary List Calls
         * @request GET:/v2/call
         * @secure
         */
        callControllerFindAllPaginated: (query, params = {}) => this.request({
            path: `/v2/call`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Calls
         * @name CallControllerFindAllMetadataPaginated
         * @summary List Call Metadata
         * @request GET:/v2/call/metadata
         * @secure
         */
        callControllerFindAllMetadataPaginated: (query, params = {}) => this.request({
            path: `/v2/call/metadata`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindAllPaginated
         * @summary List Assistants with pagination
         * @request GET:/v2/assistant
         * @secure
         */
        assistantControllerFindAllPaginated: (query, params = {}) => this.request({
            path: `/v2/assistant`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerFindAllPaginated
         * @summary List Phone Numbers
         * @request GET:/v2/phone-number
         * @secure
         */
        phoneNumberControllerFindAllPaginated: (query, params = {}) => this.request({
            path: `/v2/phone-number`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
    };
    chat = {
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerListChats
         * @summary List Chats
         * @request GET:/chat
         * @secure
         */
        chatControllerListChats: (query, params = {}) => this.request({
            path: `/chat`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * @description Creates a new chat. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive.
         *
         * @tags Chats
         * @name ChatControllerCreateChat
         * @summary Create Chat
         * @request POST:/chat
         * @secure
         */
        chatControllerCreateChat: (data, params = {}) => this.request({
            path: `/chat`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerGetChat
         * @summary Get Chat
         * @request GET:/chat/{id}
         * @secure
         */
        chatControllerGetChat: (id, params = {}) => this.request({
            path: `/chat/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerDeleteChat
         * @summary Delete Chat
         * @request DELETE:/chat/{id}
         * @secure
         */
        chatControllerDeleteChat: (id, params = {}) => this.request({
            path: `/chat/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerCreateOpenAiChat
         * @summary Create Chat (OpenAI Compatible)
         * @request POST:/chat/responses
         * @secure
         */
        chatControllerCreateOpenAiChat: (data, params = {}) => this.request({
            path: `/chat/responses`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerCreateWebChat
         * @summary Create WebChat
         * @request POST:/chat/web
         * @secure
         */
        chatControllerCreateWebChat: (data, params = {}) => this.request({
            path: `/chat/web`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Chats
         * @name ChatControllerCreateOpenAiWebChat
         * @summary Create WebChat (OpenAI Compatible)
         * @request POST:/chat/web/responses
         * @secure
         */
        chatControllerCreateOpenAiWebChat: (data, params = {}) => this.request({
            path: `/chat/web/responses`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
    };
    campaign = {
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerCreate
         * @summary Create Campaign
         * @request POST:/campaign
         * @secure
         */
        campaignControllerCreate: (data, params = {}) => this.request({
            path: `/campaign`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerFindAll
         * @summary List Campaigns
         * @request GET:/campaign
         * @secure
         */
        campaignControllerFindAll: (query, params = {}) => this.request({
            path: `/campaign`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerFindOne
         * @summary Get Campaign
         * @request GET:/campaign/{id}
         * @secure
         */
        campaignControllerFindOne: (id, params = {}) => this.request({
            path: `/campaign/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerUpdate
         * @summary Update Campaign
         * @request PATCH:/campaign/{id}
         * @secure
         */
        campaignControllerUpdate: (id, data, params = {}) => this.request({
            path: `/campaign/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Campaigns
         * @name CampaignControllerRemove
         * @summary Delete Campaign
         * @request DELETE:/campaign/{id}
         * @secure
         */
        campaignControllerRemove: (id, params = {}) => this.request({
            path: `/campaign/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    session = {
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerCreate
         * @summary Create Session
         * @request POST:/session
         * @secure
         */
        sessionControllerCreate: (data, params = {}) => this.request({
            path: `/session`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerFindAllPaginated
         * @summary List Sessions
         * @request GET:/session
         * @secure
         */
        sessionControllerFindAllPaginated: (query, params = {}) => this.request({
            path: `/session`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerFindOne
         * @summary Get Session
         * @request GET:/session/{id}
         * @secure
         */
        sessionControllerFindOne: (id, params = {}) => this.request({
            path: `/session/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerUpdate
         * @summary Update Session
         * @request PATCH:/session/{id}
         * @secure
         */
        sessionControllerUpdate: (id, data, params = {}) => this.request({
            path: `/session/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Sessions
         * @name SessionControllerRemove
         * @summary Delete Session
         * @request DELETE:/session/{id}
         * @secure
         */
        sessionControllerRemove: (id, params = {}) => this.request({
            path: `/session/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    assistant = {
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerCreate
         * @summary Create Assistant
         * @request POST:/assistant
         * @secure
         */
        assistantControllerCreate: (data, params = {}) => this.request({
            path: `/assistant`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindAll
         * @summary List Assistants
         * @request GET:/assistant
         * @secure
         */
        assistantControllerFindAll: (query, params = {}) => this.request({
            path: `/assistant`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindOne
         * @summary Get Assistant
         * @request GET:/assistant/{id}
         * @secure
         */
        assistantControllerFindOne: (id, params = {}) => this.request({
            path: `/assistant/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerUpdate
         * @summary Update Assistant
         * @request PATCH:/assistant/{id}
         * @secure
         */
        assistantControllerUpdate: (id, data, params = {}) => this.request({
            path: `/assistant/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerReplace
         * @summary Replace Assistant
         * @request PUT:/assistant/{id}
         * @secure
         */
        assistantControllerReplace: (id, data, params = {}) => this.request({
            path: `/assistant/${id}`,
            method: "PUT",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerRemove
         * @summary Delete Assistant
         * @request DELETE:/assistant/{id}
         * @secure
         */
        assistantControllerRemove: (id, params = {}) => this.request({
            path: `/assistant/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Assistants
         * @name AssistantControllerFindVersions
         * @summary List Assistant Versions
         * @request GET:/assistant/{id}/version
         * @secure
         */
        assistantControllerFindVersions: (id, query, params = {}) => this.request({
            path: `/assistant/${id}/version`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
    };
    phoneNumber = {
        /**
         * @description Use POST /phone-number instead.
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerImportTwilio
         * @summary Import Twilio Number
         * @request POST:/phone-number/import/twilio
         * @deprecated
         * @secure
         */
        phoneNumberControllerImportTwilio: (data, params = {}) => this.request({
            path: `/phone-number/import/twilio`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * @description Use POST /phone-number instead.
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerImportVonage
         * @summary Import Vonage Number
         * @request POST:/phone-number/import/vonage
         * @deprecated
         * @secure
         */
        phoneNumberControllerImportVonage: (data, params = {}) => this.request({
            path: `/phone-number/import/vonage`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerCreate
         * @summary Create Phone Number
         * @request POST:/phone-number
         * @secure
         */
        phoneNumberControllerCreate: (data, params = {}) => this.request({
            path: `/phone-number`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerFindAll
         * @summary List Phone Numbers
         * @request GET:/phone-number
         * @secure
         */
        phoneNumberControllerFindAll: (query, params = {}) => this.request({
            path: `/phone-number`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerFindOne
         * @summary Get Phone Number
         * @request GET:/phone-number/{id}
         * @secure
         */
        phoneNumberControllerFindOne: (id, params = {}) => this.request({
            path: `/phone-number/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerUpdate
         * @summary Update Phone Number
         * @request PATCH:/phone-number/{id}
         * @secure
         */
        phoneNumberControllerUpdate: (id, data, params = {}) => this.request({
            path: `/phone-number/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Phone Numbers
         * @name PhoneNumberControllerRemove
         * @summary Delete Phone Number
         * @request DELETE:/phone-number/{id}
         * @secure
         */
        phoneNumberControllerRemove: (id, params = {}) => this.request({
            path: `/phone-number/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    tool = {
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerCreate
         * @summary Create Tool
         * @request POST:/tool
         * @secure
         */
        toolControllerCreate: (data, params = {}) => this.request({
            path: `/tool`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerFindAll
         * @summary List Tools
         * @request GET:/tool
         * @secure
         */
        toolControllerFindAll: (query, params = {}) => this.request({
            path: `/tool`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerFindOne
         * @summary Get Tool
         * @request GET:/tool/{id}
         * @secure
         */
        toolControllerFindOne: (id, params = {}) => this.request({
            path: `/tool/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerUpdate
         * @summary Update Tool
         * @request PATCH:/tool/{id}
         * @secure
         */
        toolControllerUpdate: (id, data, params = {}) => this.request({
            path: `/tool/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tools
         * @name ToolControllerRemove
         * @summary Delete Tool
         * @request DELETE:/tool/{id}
         * @secure
         */
        toolControllerRemove: (id, params = {}) => this.request({
            path: `/tool/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    file = {
        /**
         * @description Use POST /file instead.
         *
         * @tags Files
         * @name FileControllerCreateDeprecated
         * @summary Upload File
         * @request POST:/file/upload
         * @deprecated
         * @secure
         */
        fileControllerCreateDeprecated: (data, params = {}) => this.request({
            path: `/file/upload`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.FormData,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerCreate
         * @summary Upload File
         * @request POST:/file
         * @secure
         */
        fileControllerCreate: (data, params = {}) => this.request({
            path: `/file`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.FormData,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerFindAll
         * @summary List Files
         * @request GET:/file
         * @secure
         */
        fileControllerFindAll: (params = {}) => this.request({
            path: `/file`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerFindOne
         * @summary Get File
         * @request GET:/file/{id}
         * @secure
         */
        fileControllerFindOne: (id, params = {}) => this.request({
            path: `/file/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerUpdate
         * @summary Update File
         * @request PATCH:/file/{id}
         * @secure
         */
        fileControllerUpdate: (id, data, params = {}) => this.request({
            path: `/file/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Files
         * @name FileControllerRemove
         * @summary Delete File
         * @request DELETE:/file/{id}
         * @secure
         */
        fileControllerRemove: (id, params = {}) => this.request({
            path: `/file/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    knowledgeBase = {
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerCreate
         * @summary Create Knowledge Base
         * @request POST:/knowledge-base
         * @secure
         */
        knowledgeBaseControllerCreate: (data, params = {}) => this.request({
            path: `/knowledge-base`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerFindAll
         * @summary List Knowledge Bases
         * @request GET:/knowledge-base
         * @secure
         */
        knowledgeBaseControllerFindAll: (query, params = {}) => this.request({
            path: `/knowledge-base`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerFindOne
         * @summary Get Knowledge Base
         * @request GET:/knowledge-base/{id}
         * @secure
         */
        knowledgeBaseControllerFindOne: (id, params = {}) => this.request({
            path: `/knowledge-base/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerUpdate
         * @summary Update Knowledge Base
         * @request PATCH:/knowledge-base/{id}
         * @secure
         */
        knowledgeBaseControllerUpdate: (id, data, params = {}) => this.request({
            path: `/knowledge-base/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Knowledge Base
         * @name KnowledgeBaseControllerRemove
         * @summary Delete Knowledge Base
         * @request DELETE:/knowledge-base/{id}
         * @secure
         */
        knowledgeBaseControllerRemove: (id, params = {}) => this.request({
            path: `/knowledge-base/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    workflow = {
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerFindAll
         * @summary Get Workflows
         * @request GET:/workflow
         * @secure
         */
        workflowControllerFindAll: (params = {}) => this.request({
            path: `/workflow`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerCreate
         * @summary Create Workflow
         * @request POST:/workflow
         * @secure
         */
        workflowControllerCreate: (data, params = {}) => this.request({
            path: `/workflow`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerFindOne
         * @summary Get Workflow
         * @request GET:/workflow/{id}
         * @secure
         */
        workflowControllerFindOne: (id, params = {}) => this.request({
            path: `/workflow/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerDelete
         * @summary Delete Workflow
         * @request DELETE:/workflow/{id}
         * @secure
         */
        workflowControllerDelete: (id, params = {}) => this.request({
            path: `/workflow/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Workflow
         * @name WorkflowControllerUpdate
         * @summary Update Workflow
         * @request PATCH:/workflow/{id}
         * @secure
         */
        workflowControllerUpdate: (id, data, params = {}) => this.request({
            path: `/workflow/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
    };
    squad = {
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerCreate
         * @summary Create Squad
         * @request POST:/squad
         * @secure
         */
        squadControllerCreate: (data, params = {}) => this.request({
            path: `/squad`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerFindAll
         * @summary List Squads
         * @request GET:/squad
         * @secure
         */
        squadControllerFindAll: (query, params = {}) => this.request({
            path: `/squad`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerFindOne
         * @summary Get Squad
         * @request GET:/squad/{id}
         * @secure
         */
        squadControllerFindOne: (id, params = {}) => this.request({
            path: `/squad/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerUpdate
         * @summary Update Squad
         * @request PATCH:/squad/{id}
         * @secure
         */
        squadControllerUpdate: (id, data, params = {}) => this.request({
            path: `/squad/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Squads
         * @name SquadControllerRemove
         * @summary Delete Squad
         * @request DELETE:/squad/{id}
         * @secure
         */
        squadControllerRemove: (id, params = {}) => this.request({
            path: `/squad/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    testSuite = {
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerFindAllPaginated
         * @summary List Test Suites
         * @request GET:/test-suite
         * @secure
         */
        testSuiteControllerFindAllPaginated: (query, params = {}) => this.request({
            path: `/test-suite`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerCreate
         * @summary Create Test Suite
         * @request POST:/test-suite
         * @secure
         */
        testSuiteControllerCreate: (data, params = {}) => this.request({
            path: `/test-suite`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerFindOne
         * @summary Get Test Suite
         * @request GET:/test-suite/{id}
         * @secure
         */
        testSuiteControllerFindOne: (id, params = {}) => this.request({
            path: `/test-suite/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerUpdate
         * @summary Update Test Suite
         * @request PATCH:/test-suite/{id}
         * @secure
         */
        testSuiteControllerUpdate: (id, data, params = {}) => this.request({
            path: `/test-suite/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suites
         * @name TestSuiteControllerRemove
         * @summary Delete Test Suite
         * @request DELETE:/test-suite/{id}
         * @secure
         */
        testSuiteControllerRemove: (id, params = {}) => this.request({
            path: `/test-suite/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerFindAllPaginated
         * @summary List Tests
         * @request GET:/test-suite/{testSuiteId}/test
         * @secure
         */
        testSuiteTestControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/test`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerCreate
         * @summary Create Test
         * @request POST:/test-suite/{testSuiteId}/test
         * @secure
         */
        testSuiteTestControllerCreate: (testSuiteId, data, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/test`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerFindOne
         * @summary Get Test
         * @request GET:/test-suite/{testSuiteId}/test/{id}
         * @secure
         */
        testSuiteTestControllerFindOne: (testSuiteId, id, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/test/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerUpdate
         * @summary Update Test
         * @request PATCH:/test-suite/{testSuiteId}/test/{id}
         * @secure
         */
        testSuiteTestControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/test/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Tests
         * @name TestSuiteTestControllerRemove
         * @summary Delete Test
         * @request DELETE:/test-suite/{testSuiteId}/test/{id}
         * @secure
         */
        testSuiteTestControllerRemove: (testSuiteId, id, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/test/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerFindAllPaginated
         * @summary List Test Suite Runs
         * @request GET:/test-suite/{testSuiteId}/run
         * @secure
         */
        testSuiteRunControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/run`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerCreate
         * @summary Create Test Suite Run
         * @request POST:/test-suite/{testSuiteId}/run
         * @secure
         */
        testSuiteRunControllerCreate: (testSuiteId, data, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/run`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerFindOne
         * @summary Get Test Suite Run
         * @request GET:/test-suite/{testSuiteId}/run/{id}
         * @secure
         */
        testSuiteRunControllerFindOne: (testSuiteId, id, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/run/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerUpdate
         * @summary Update Test Suite Run
         * @request PATCH:/test-suite/{testSuiteId}/run/{id}
         * @secure
         */
        testSuiteRunControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/run/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Test Suite Runs
         * @name TestSuiteRunControllerRemove
         * @summary Delete Test Suite Run
         * @request DELETE:/test-suite/{testSuiteId}/run/{id}
         * @secure
         */
        testSuiteRunControllerRemove: (testSuiteId, id, params = {}) => this.request({
            path: `/test-suite/${testSuiteId}/run/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    analytics = {
        /**
         * No description
         *
         * @tags Analytics
         * @name AnalyticsControllerQuery
         * @summary Create Analytics Queries
         * @request POST:/analytics
         * @secure
         */
        analyticsControllerQuery: (data, params = {}) => this.request({
            path: `/analytics`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
    };
    log = {
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerCallLogsQuery
         * @summary Get Call Logs
         * @request GET:/log
         * @secure
         */
        loggingControllerCallLogsQuery: (query, params = {}) => this.request({
            path: `/log`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerCallLogsDeleteQuery
         * @summary Delete Call Logs
         * @request DELETE:/log
         * @secure
         */
        loggingControllerCallLogsDeleteQuery: (query, params = {}) => this.request({
            path: `/log`,
            method: "DELETE",
            query: query,
            secure: true,
            ...params,
        }),
    };
    logs = {
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerLogsQuery
         * @summary Get Logs
         * @request GET:/logs
         * @deprecated
         * @secure
         */
        loggingControllerLogsQuery: (query, params = {}) => this.request({
            path: `/logs`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Logs
         * @name LoggingControllerLogsDeleteQuery
         * @summary Delete Logs
         * @request DELETE:/logs
         * @deprecated
         * @secure
         */
        loggingControllerLogsDeleteQuery: (query, params = {}) => this.request({
            path: `/logs`,
            method: "DELETE",
            query: query,
            secure: true,
            ...params,
        }),
    };
    structuredOutput = {
        /**
         * No description
         *
         * @tags Structured Outputs
         * @name StructuredOutputControllerFindAll
         * @summary List Structured Outputs
         * @request GET:/structured-output
         * @secure
         */
        structuredOutputControllerFindAll: (query, params = {}) => this.request({
            path: `/structured-output`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Structured Outputs
         * @name StructuredOutputControllerCreate
         * @summary Create Structured Output
         * @request POST:/structured-output
         * @secure
         */
        structuredOutputControllerCreate: (data, params = {}) => this.request({
            path: `/structured-output`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Structured Outputs
         * @name StructuredOutputControllerFindOne
         * @summary Get Structured Output
         * @request GET:/structured-output/{id}
         * @secure
         */
        structuredOutputControllerFindOne: (id, params = {}) => this.request({
            path: `/structured-output/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Structured Outputs
         * @name StructuredOutputControllerUpdate
         * @summary Update Structured Output
         * @request PATCH:/structured-output/{id}
         * @secure
         */
        structuredOutputControllerUpdate: (id, query, data, params = {}) => this.request({
            path: `/structured-output/${id}`,
            method: "PATCH",
            query: query,
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Structured Outputs
         * @name StructuredOutputControllerRemove
         * @summary Delete Structured Output
         * @request DELETE:/structured-output/{id}
         * @secure
         */
        structuredOutputControllerRemove: (id, params = {}) => this.request({
            path: `/structured-output/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    org = {
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerCreate
         * @summary Create Org
         * @request POST:/org
         * @secure
         */
        orgControllerCreate: (data, params = {}) => this.request({
            path: `/org`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerFindAll
         * @summary List Orgs
         * @request GET:/org
         * @secure
         */
        orgControllerFindAll: (params = {}) => this.request({
            path: `/org`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerFeatureFlagEnabled
         * @summary Check if Feature Flag is enabled
         * @request GET:/org/feature-flag
         * @secure
         */
        orgControllerFeatureFlagEnabled: (query, params = {}) => this.request({
            path: `/org/feature-flag`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerFindOne
         * @summary Get Org
         * @request GET:/org/{id}
         * @secure
         */
        orgControllerFindOne: (id, params = {}) => this.request({
            path: `/org/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerUpdate
         * @summary Update Org
         * @request PATCH:/org/{id}
         * @secure
         */
        orgControllerUpdate: (id, data, params = {}) => this.request({
            path: `/org/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerDeleteOrg
         * @summary Delete Org
         * @request DELETE:/org/{id}
         * @secure
         */
        orgControllerDeleteOrg: (id, params = {}) => this.request({
            path: `/org/${id}`,
            method: "DELETE",
            secure: true,
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerFindAllUsers
         * @summary List Users
         * @request GET:/org/{id}/user
         * @secure
         */
        orgControllerFindAllUsers: (id, params = {}) => this.request({
            path: `/org/${id}/user`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerOrgLeave
         * @summary Leave Org
         * @request DELETE:/org/{id}/leave
         * @secure
         */
        orgControllerOrgLeave: (id, params = {}) => this.request({
            path: `/org/${id}/leave`,
            method: "DELETE",
            secure: true,
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerOrgRemoveUser
         * @summary Remove Org Member
         * @request DELETE:/org/{id}/member/{memberId}/leave
         * @secure
         */
        orgControllerOrgRemoveUser: (id, memberId, params = {}) => this.request({
            path: `/org/${id}/member/${memberId}/leave`,
            method: "DELETE",
            secure: true,
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerUsersInvite
         * @summary Invite User
         * @request POST:/org/{id}/invite
         * @secure
         */
        orgControllerUsersInvite: (id, data, params = {}) => this.request({
            path: `/org/${id}/invite`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerUserUpdate
         * @summary Update User Role
         * @request PATCH:/org/{id}/role
         * @secure
         */
        orgControllerUserUpdate: (id, data, params = {}) => this.request({
            path: `/org/${id}/role`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            ...params,
        }),
        /**
         * No description
         *
         * @tags Orgs
         * @name OrgControllerOrgToken
         * @summary Generate User Org JWT
         * @request GET:/org/{id}/auth
         * @secure
         */
        orgControllerOrgToken: (id, params = {}) => this.request({
            path: `/org/${id}/auth`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    token = {
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerCreate
         * @summary Create Token
         * @request POST:/token
         * @secure
         */
        tokenControllerCreate: (data, params = {}) => this.request({
            path: `/token`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerFindAll
         * @summary List Tokens
         * @request GET:/token
         * @secure
         */
        tokenControllerFindAll: (query, params = {}) => this.request({
            path: `/token`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerFindOne
         * @summary Get Token
         * @request GET:/token/{id}
         * @secure
         */
        tokenControllerFindOne: (id, params = {}) => this.request({
            path: `/token/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerUpdate
         * @summary Update Token
         * @request PATCH:/token/{id}
         * @secure
         */
        tokenControllerUpdate: (id, data, params = {}) => this.request({
            path: `/token/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Tokens
         * @name TokenControllerRemove
         * @summary Delete Token
         * @request DELETE:/token/{id}
         * @secure
         */
        tokenControllerRemove: (id, params = {}) => this.request({
            path: `/token/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    credential = {
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerCreate
         * @summary Create Credential
         * @request POST:/credential
         * @secure
         */
        credentialControllerCreate: (data, params = {}) => this.request({
            path: `/credential`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerFindAll
         * @summary List Credentials
         * @request GET:/credential
         * @secure
         */
        credentialControllerFindAll: (query, params = {}) => this.request({
            path: `/credential`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerFindOne
         * @summary Get Credential
         * @request GET:/credential/{id}
         * @secure
         */
        credentialControllerFindOne: (id, params = {}) => this.request({
            path: `/credential/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerUpdate
         * @summary Update Credential
         * @request PATCH:/credential/{id}
         * @secure
         */
        credentialControllerUpdate: (id, data, params = {}) => this.request({
            path: `/credential/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerRemove
         * @summary Delete Credential
         * @request DELETE:/credential/{id}
         * @secure
         */
        credentialControllerRemove: (id, params = {}) => this.request({
            path: `/credential/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerGenerateSession
         * @summary Generate a credential session
         * @request POST:/credential/session
         * @secure
         */
        credentialControllerGenerateSession: (data, params = {}) => this.request({
            path: `/credential/session`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerHandleWebhook
         * @summary Handle credential webhook
         * @request POST:/credential/webhook
         */
        credentialControllerHandleWebhook: (data, params = {}) => this.request({
            path: `/credential/webhook`,
            method: "POST",
            body: data,
            type: ContentType.Json,
            ...params,
        }),
        /**
         * No description
         *
         * @tags Credentials
         * @name CredentialControllerTriggerCredentialAction
         * @summary Trigger a credential action
         * @request POST:/credential/trigger
         * @secure
         */
        credentialControllerTriggerCredentialAction: (data, params = {}) => this.request({
            path: `/credential/trigger`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            ...params,
        }),
    };
    template = {
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerCreate
         * @summary Create Template
         * @request POST:/template
         * @secure
         */
        templateControllerCreate: (data, params = {}) => this.request({
            path: `/template`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerFindAll
         * @summary List Templates
         * @request GET:/template
         * @secure
         */
        templateControllerFindAll: (query, params = {}) => this.request({
            path: `/template`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerFindAllPinned
         * @summary List Templates
         * @request GET:/template/pinned
         * @secure
         */
        templateControllerFindAllPinned: (params = {}) => this.request({
            path: `/template/pinned`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerFindOne
         * @summary Get Template
         * @request GET:/template/{id}
         * @secure
         */
        templateControllerFindOne: (id, params = {}) => this.request({
            path: `/template/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerUpdate
         * @summary Update Template
         * @request PATCH:/template/{id}
         * @secure
         */
        templateControllerUpdate: (id, data, params = {}) => this.request({
            path: `/template/${id}`,
            method: "PATCH",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Templates
         * @name TemplateControllerRemove
         * @summary Delete Template
         * @request DELETE:/template/{id}
         * @secure
         */
        templateControllerRemove: (id, params = {}) => this.request({
            path: `/template/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
    };
    voiceLibrary = {
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceGetByProvider
         * @summary Get voices in Voice Library by Provider
         * @request GET:/voice-library/{provider}
         * @secure
         */
        voiceLibraryControllerVoiceGetByProvider: (provider, query, params = {}) => this.request({
            path: `/voice-library/${provider}`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceGetAccentsByProvider
         * @summary Get accents in Voice Library by Provider
         * @request GET:/voice-library/{provider}/accents
         * @secure
         */
        voiceLibraryControllerVoiceGetAccentsByProvider: (provider, params = {}) => this.request({
            path: `/voice-library/${provider}/accents`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceLibrarySyncByProvider
         * @summary Sync Private voices in Voice Library by Provider
         * @request POST:/voice-library/sync/{provider}
         * @secure
         */
        voiceLibraryControllerVoiceLibrarySyncByProvider: (provider, params = {}) => this.request({
            path: `/voice-library/sync/${provider}`,
            method: "POST",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceLibrarySyncDefaultVoices
         * @summary Sync Default voices in Voice Library by Providers
         * @request POST:/voice-library/sync
         * @secure
         */
        voiceLibraryControllerVoiceLibrarySyncDefaultVoices: (data, params = {}) => this.request({
            path: `/voice-library/sync`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Voice Library
         * @name VoiceLibraryControllerVoiceLibraryCreateSesameVoice
         * @summary Create a new voice in the Voice Library using Sesame
         * @request POST:/voice-library/create-sesame-voice
         * @secure
         */
        voiceLibraryControllerVoiceLibraryCreateSesameVoice: (data, params = {}) => this.request({
            path: `/voice-library/create-sesame-voice`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            ...params,
        }),
    };
    provider = {
        /**
         * No description
         *
         * @tags Provider Resources
         * @name ProviderResourceControllerCreateProviderResource
         * @summary Create Provider Resource
         * @request POST:/provider/{provider}/{resourceName}
         * @secure
         */
        providerResourceControllerCreateProviderResource: (provider, resourceName, params = {}) => this.request({
            path: `/provider/${provider}/${resourceName}`,
            method: "POST",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Provider Resources
         * @name ProviderResourceControllerGetProviderResourcesPaginated
         * @summary List Provider Resources
         * @request GET:/provider/{provider}/{resourceName}
         * @secure
         */
        providerResourceControllerGetProviderResourcesPaginated: (provider, resourceName, query, params = {}) => this.request({
            path: `/provider/${provider}/${resourceName}`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Provider Resources
         * @name ProviderResourceControllerGetProviderResource
         * @summary Get Provider Resource
         * @request GET:/provider/{provider}/{resourceName}/{id}
         * @secure
         */
        providerResourceControllerGetProviderResource: (provider, resourceName, id, params = {}) => this.request({
            path: `/provider/${provider}/${resourceName}/${id}`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Provider Resources
         * @name ProviderResourceControllerDeleteProviderResource
         * @summary Delete Provider Resource
         * @request DELETE:/provider/{provider}/{resourceName}/{id}
         * @secure
         */
        providerResourceControllerDeleteProviderResource: (provider, resourceName, id, params = {}) => this.request({
            path: `/provider/${provider}/${resourceName}/${id}`,
            method: "DELETE",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Provider Resources
         * @name ProviderResourceControllerUpdateProviderResource
         * @summary Update Provider Resource
         * @request PATCH:/provider/{provider}/{resourceName}/{id}
         * @secure
         */
        providerResourceControllerUpdateProviderResource: (provider, resourceName, id, params = {}) => this.request({
            path: `/provider/${provider}/${resourceName}/${id}`,
            method: "PATCH",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Providers
         * @name ProviderControllerGetWorkflows
         * @request GET:/{provider}/workflows
         * @secure
         */
        providerControllerGetWorkflows: (provider, query, params = {}) => this.request({
            path: `/${provider}/workflows`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Providers
         * @name ProviderControllerGetWorkflowTriggerHook
         * @request GET:/{provider}/workflows/{workflowId}/hooks
         * @secure
         */
        providerControllerGetWorkflowTriggerHook: (provider, workflowId, params = {}) => this.request({
            path: `/${provider}/workflows/${workflowId}/hooks`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Providers
         * @name ProviderControllerGetLocations
         * @request GET:/{provider}/locations
         * @secure
         */
        providerControllerGetLocations: (provider, params = {}) => this.request({
            path: `/${provider}/locations`,
            method: "GET",
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerSearchVoices
         * @summary Search Voice from Provider Voice Library.
         * @request GET:/{provider}/voices/search
         * @deprecated
         * @secure
         */
        voiceProviderControllerSearchVoices: (provider, query, params = {}) => this.request({
            path: `/${provider}/voices/search`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerSearchVoice
         * @summary Search Voice from Provider Voice Library.
         * @request GET:/{provider}/voice/search
         * @secure
         */
        voiceProviderControllerSearchVoice: (provider, query, params = {}) => this.request({
            path: `/${provider}/voice/search`,
            method: "GET",
            query: query,
            secure: true,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerAddVoices
         * @summary Add Shared Voice to your Provider Account.
         * @request POST:/{provider}/voices/add
         * @deprecated
         * @secure
         */
        voiceProviderControllerAddVoices: (provider, data, params = {}) => this.request({
            path: `/${provider}/voices/add`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerAddVoice
         * @summary Add Shared Voice to your Provider Account.
         * @request POST:/{provider}/voice/add
         * @secure
         */
        voiceProviderControllerAddVoice: (provider, data, params = {}) => this.request({
            path: `/${provider}/voice/add`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.Json,
            format: "json",
            ...params,
        }),
    };
    v11Labs = {
        /**
         * No description
         *
         * @tags Providers
         * @name VoiceProviderControllerCloneVoices
         * @summary Clone a voice to the provider account and add to Vapi Voice Library.
         * @request POST:/11labs/voice/clone
         * @secure
         */
        voiceProviderControllerCloneVoices: (data, params = {}) => this.request({
            path: `/11labs/voice/clone`,
            method: "POST",
            body: data,
            secure: true,
            type: ContentType.FormData,
            ...params,
        }),
    };
}
exports.Api = Api;
